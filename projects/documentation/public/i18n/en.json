{
  "HOME": {
    "TITLE": "What is Flexi UI?",
    "DESCRIPTION": "Flexi UI is an Angular UI library that offers a variety of powerful UI components available for free. It aims to provide the essential components you need to design modern and impressive frontends. You can also contribute to the project by supporting the codebase or sharing your suggestions and feedback to help it grow. Don‚Äôt forget to give a star (‚≠ê) to the GitHub repository to show your support üòä",
    "BEST_REGARDS": "Best regards, Taner Saydam",
    "GITHUB_LINK": "Click here to access the GitHub repository",
    "PAGE_NAME": "Home Page",
    "PAGE_DESCRIPTION": "Flexi UI Home Page",
    "WELCOME": "Home Page"
  },
  "LANGUAGE": {
    "TURKISH": "Turkish",
    "ENGLISH": "English"
  },
  "FLEXI_BUTTON": {
    "INSTALLATION": "Installation",
    "USAGE": "Usage",
    "DESCRIPTION": "A customizable, stylish, and practical button component",
    "ICON": "You can use any icon you want from here",
    "WITH_TEXT": "With Text",
    "WITH_ICON": "With Icon",
    "WITH_TEXT_AND_ICON": "With Text and Icon",
    "WITH_COLOR": "With Color",
    "ROUNDED": "Rounded",
    "LOADING": "Loading",
    "SIZE": "Size",
    "COLOR": "Color",
    "CUSTOMIZE_WITH": "Customize Width",
    "CUSTOMIZE_CONTENT": "Customize Button Content"
  },
  "FLEXI_GRID": {
    "MAIN": {
      "WHAT_IS": "Meet Flexi Grid, a stylish and functional Data Grid that you can use in your Angular applications. This component is fully compatible with the OData structure and has a flexible structure that allows you to use it either with Data Binding or by retrieving and processing all your data."
    },
    "FIRST_USE": {
      "DESCRIPTION": "To use Flexi Grid in your standalone component, you need to import the FlexGridModule.",
      "DESCRIPTION_SECOND": "In HTML, you need to call the component element and pass the data into it. Then, use the column element to display the data you want.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "NOTE": "Note: If you have not added flexi-grid-column, the grid will not be visible.",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "First Use",
      "TAB_PANE_SECOND": "HTML Code",
      "TAB_PANE_THIRD": "Typescript Code",
      "TAB_PANE_FOURTH": "Data",
      "CODE_DESCRIPTION_TITLE": "Code Explanation",
      "FLEXI_GRID_DESCRIPTION": "Flexi Grid element. This is how we add the grid to our page.",
      "DATA_DESCRIPTION": "We pass our list to the data attribute.",
      "CODE_DESCRIPTION_NOTE_FIRST": "Note: In the project, variables are stored as signals, but this is not mandatory. You can use normal variables if you prefer.",
      "GRID_COLUMN_DESCRIPTION": "To display columns within the grid, you must add this element for each field you want to display.",
      "FIELD_DESCRIPTION": "Defines which field in the list corresponds to the grid column.",
      "TITLE_DESCRIPTION": "Allows customization of the grid column title.",
      "CODE_DESCRIPTION_NOTE_SECOND": "Note: If this attribute is not assigned, it will automatically take the field name.",
      "ATTRIBUTE_TABLE_COLUMN_TITLE": "Acceptable Value Types",
      "ATTRIBUTE_TABLE_NOTE": "With our first example, we successfully displayed our list in the grid."
    },
    "FOOTER_PAGE": {
      "DESCRIPTION": "You can modify the table footer area and add any structure you want.",
      "EXAMPLE_CODE_TITLE": "Example code:",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Footer example",
      "TAB_PANE_SECOND": "HTML code",
      "TAB_PANE_THIRD": "Typescript code",
      "TAB_PANE_FOURTH": "Data",
      "CODE_DESCRIPTION_TITLE": "Code description",
      "FOOTER_TEMPLATE_DESCRIPTION": "Any elements you add inside this template will be displayed in the table footer area.",
      "FOOTER_TEMPLATE_ATTRIBUTE_DESCRIPTION": "To make the added structure visible, you need to reference this element in the attribute.",
      "FOOTER_TEMPLATE_NOTE": "Note: Creating an element with ng-template #footerTemplate is not enough to display its content in the footer. You must provide the reference obtained with the hashtag as the value for the [footerTemplate] attribute! When assigning the value, remember that this is the table footer area. If you do not add rows with the tr element and columns with td or th, you may break the responsive layout.",
      "ATTRIBUTE_TABLE_VALUE_TYPES": "Acceptable Value Types"
    },
    "INDEX_PAGE": {
      "DESCRIPTION_FIRST": "To display the index order,",
      "DESCRIPTION_SECOND": "you need to set the attribute to true.",
      "EXAMPLE_CODE_TITLE": "Example code:",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Index order example",
      "TAB_PANE_SECOND": "HTML code",
      "TAB_PANE_THIRD": "Typescript code",
      "CODE_DESCRIPTION_TITLE": "Code description",
      "SHOW_INDEX_DESCRIPTION": "If you want to display the index order, you need to set this attribute to true.",
      "INDEX_WIDTH_DESCRIPTION": "The default index width is 70px. If you want to change it, you can use this attribute.",
      "INDEX_WIDTH_NOTE": "Note: If showIndex is not true, the value you set for this attribute will not work.",
      "INDEX_TEXT_ALIGN_DESCRIPTION": "Specifies the text alignment of the index.",
      "INDEX_TEXT_ALIGN_NOTE": "Note: If showIndex is not true, the value you set for this attribute will not work.",
      "ATTRIBUTE_TABLE_VALUE_TYPES": "Acceptable Value Types",
      "ATTRIBUTE_TABLE_DEFAULT_VALUE": "Default Value"
    },
    "CAPTION_PAGE": {
      "DESCRIPTION": "You can add a table header and use the Column Visibility and Refresh Data buttons in the header. You can also add extra buttons to that area if you wish.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Caption Example",
      "TAB_PANE_SECOND": "HTML Code",
      "TAB_PANE_THIRD": "TypeScript Code",
      "TAB_CONTENT_SHOW_CAPTION": "Show caption area",
      "TAB_CONTENT_SHOW_COLUMN_VISIBILITY": "Show Column Visibility button",
      "TAB_CONTENT_SHOW_REFRESH_BUTTON": "Show Refresh Data button",
      "BUTTON_ADD_USER": "Add User",
      "CODE_DESCRIPTION_TITLE": "Code Explanation",
      "ATTRIBUTES_SHOW_CAPTION": "You must set this attribute to true to display the caption section.",
      "ATTRIBUTES_CAPTION_TITLE": "You can assign a value to this attribute to set a title for the caption.",
      "ATTRIBUTES_SHOW_COLUMN_VISIBILITY": "You can show or hide this dropdown that manages column visibility when the caption section is visible.",
      "ATTRIBUTES_COLUMN_VISIBILITY_BUTTON_CLASS": "You can use this attribute to assign a custom class to the Column Visibility button.",
      "ATTRIBUTES_SHOW_REFRESH_BUTTON": "You can show or hide this button, which refreshes the data when the caption section is visible. Clicking this button resets all parameters such as order and filters.",
      "ATTRIBUTES_REFRESH_BUTTON_CLASS": "You can use this attribute to assign a custom class to the Refresh Data button.",
      "ATTRIBUTES_CAPTION_TEMPLATE": "Everything you add inside this element will appear in the caption‚Äôs right-side button section.",
      "ATTRIBUTES_CAPTION_TEMPLATE_BRACKET": "You must assign the reference of this element to the attribute to display the added buttons.",
      "ATTRIBUTES_CAPTION_TEMPLATE_NOTE": "Note: Creating an element with ng-template #captionTemplate is not enough to display its contents in the caption. You must explicitly pass the reference obtained with the hashtag to the [captionTemplate] attribute!",
      "ATTRIBUTE_TABLE_VALUE_TYPES": "Possible Value Types",
      "ATTRIBUTE_TABLE_DEFAULT_VALUE": "Default Value"
    },
    "CHANGE_THEME_PAGE": {
      "TITLE": "Change Theme",
      "DESCRIPTION": "The grid supports two different themes: Light and Dark. To switch between themes, just provide a value for the [themeClass] attribute.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Change Theme",
      "TAB_PANE_SECOND": "HTML Code",
      "TAB_PANE_THIRD": "Typescript Code",

      "CODE_DESCRIPTION_TITLE": "Code Description",
      "ATTRIBUTES_CHANGE_THEME": "The area where you define the theme color. It accepts light | dark values.",
      "ATTRIBUTE_TABLE_VALUE_TYPES": "Possible Value Types",
      "ATTRIBUTE_TABLE_DEFAULT_VALUE": "Default Value"
    },
    "INSTALLATION_PAGE": {
      "DESCRIPTION": "To use/update Flexi Grid, you need to run the following npm command in your Angular project."
    },
    "OPTIONS_PAGE": {
      "DESCRIPTION": "You can find additional settings below.",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Example of additional settings",
      "TAB_PANE_SECOND": "HTML codes",
      "TAB_PANE_THIRD": "Typescript codes",
      "ATTRIBUTES_HEIGHT": "You can set the data grid size in px. Default is 420px.",
      "ATTRIBUTES_AUTO_HEIGHT": "If you want the data grid size to be adjusted automatically instead of using a fixed size, you can set this to true.",
      "ATTRIBUTES_AUTO_HEIGHT_NOTE": "Note: When this setting is true, the height value you provide will not work!",
      "ATTRIBUTES_MIN_WIDTH_COLUMN": "You can set the table's min-width by providing a number value. Thanks to this setting, overflow will be enabled on pages shorter than the specified length. This means the length remains fixed, but a scrollbar will be used to navigate horizontally instead of overflowing the page.",
      "ATTRIBUTES_USE_MIN_WIDTH": "If you do not want the min-width setting to be applied, you can set this to false. In that case, the size will be adjusted automatically based on the page width.",
      "ATTRIBUTES_USE_MIN_WIDTH_NOTE": "Note: When this setting is false, the min-width value you provide will not work!",
      "ATTRIBUTES_AUTO_WIDTH": "If you do not want the table width to be 100%, you should set this to false and define a width attribute.",
      "ATTRIBUTES_AUTO_WIDTH_NOTE": "Note: When this setting is true, the width value you provide will not work!",
      "ATTRIBUTES_WIDTH_TABLE": "You can adjust the table width using this. Default is 100%.",
      "ATTRIBUTES_WIDTH_COLUMN": "You can set the column widths. For example: 100px, 20%, etc.",
      "ATTRIBUTES_VISIBLE_COLUMN": "If you want to keep the columns hidden and make them visible when needed, you can use this setting.",
      "ATTRIBUTES_FOOTER_PER_PAGE_TEXT": "You can change the text following the page size selector in the pagination using this attribute.",
      "ATTRIBUTE_TABLE_VALUE_TYPES": "Possible Value Types",
      "ATTRIBUTE_TABLE_DEFAULT_VALUE": "Default Value"
    },
    "DATABINDING_PAGE": {
      "DESCRIPTION": "With the Data Binding feature, you can capture the value of every action performed on the table and use it with OData or process it as you wish. When you set the Data Binding attribute to true, the outputs of the actions performed (such as page changes in pagination, ordering, filtering, etc.) can be captured in a state object via an event. You can either use this value by converting it into an OData-supported endpoint with the service available in this library or handle it as you wish.",
      "WARNING": "Important note: When you set Data Binding to true, the table stops functioning automatically and requires you to handle everything manually. For example, when you click on a page number to change pages, it sends you the new page information but does not navigate to it. Similarly, when you enter a value in the filter, it provides the entered value in the state object but does not perform the search.",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Data Binding Example",
      "TAB_PANE_SECOND": "HTML Code",
      "TAB_PANE_THIRD": "Typescript Code",
      "CODE_DESCRIPTION_TITLE": "Code Explanations",
      "ATTRIBUTE_DATA_BINDING": "Enables the Data Binding structure. If you do not set this to true, you cannot use Data Binding.",
      "ATTRIBUTE_TOTAL": "The value used in pagination calculations. If Data Binding is not enabled, it is calculated automatically.",
      "ATTRIBUTE_LOADING": "If you want a loader to be displayed while data is loading in the data grid, you can create a variable and control the loader display before and after data retrieval based on the state of this variable.",
      "ATTRIBUTE_DATA_STATE_CHANGE": "After every action performed, this event receives a State object containing information about all performed actions, such as pageNumber, filter, and order. You can use this to manage data as needed.",
      "TABLE_VALUE_TYPES": "Acceptable Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "CUSTOMCOLUMN_PAGE": {
      "DESCRIPTION": "You can add new columns to the grid if you wish. These columns can use existing data from your dataset, or you can use them for completely different purposes, such as adding Edit or Delete buttons.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "THIS_IS_COLUMN": "This is the column value",
      "THIS_IS_INDEX": "This is the index",
      "TAB_PANE_SECOND": "HTML Code",
      "TAB_PANE_THIRD": "Typescript Code",
      "UPDATE": "Update",
      "DELETE": "Delete"
    },
    "EXPORTEXCEL_PAGE": {
      "DESCRIPTION": "One of the options you can use when adding a table header is the export Excel button. With this button, you can export the data in your current dataset or any other data you want as an Excel file.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "NOTE": "Note: You need to provide this option as a method without parentheses. You should append .bind(this) to it. Alternatively, you can create a method with an arrow function in TS and pass it.",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "Typescript Code",
      "TAB_PANE_FIRST": "Export Excel Example",
      "CODE_DESCRIPTION_TITLE": "Code Description",
      "ATTRIBUTE_SHOW_EXPORT_EXCEL": "To display the Export Excel button, you must set this attribute to true.",
      "ATTRIBUTE_EXPORT_EXCEL_FILE_NAME": "To assign a specific name to the exported Excel file, you can set a value for this attribute. If left empty, it defaults to 'export-excel'.",
      "ATTRIBUTE_EXPORT_EXCEL_BUTTON_CLICK": "By default, clicking the export Excel button downloads the current data in the grid. However, if you want to export different data to Excel, you can assign a method to this attribute. In that method, you first capture the data and then pass your new data to the exportExcel method within <b>Flexi Service</b> to perform the export.",
      "TABLE_VALUE_TYPES": "Acceptable Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "RESIZABLE_PAGE": {
      "DESCRIPTION": "You can enable column resizing by setting the [resizable] attribute to true. You can resize each column by dragging the line next to the column header with the mouse. If desired, this feature can be disabled on a per-column basis.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "EXAMPLE_USAGE_TITLE": "Example Usage:",
      "CODE_DESCRIPTION_TITLE": "Code Explanation",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "Typescript Code",
      "ATTRIBUTE_RESIZABLE": "To enable the resize feature, set it to <b>true</b>. To disable it, set it to <b>false</b>.",
      "ATTRIBUTE_RESIZABLE_COLUMN": "You can enable or disable the resize feature on a per-column basis.",
      "TABLE_VALUE_TYPES": "Accepted Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "REORDERABLE_PAGE": {
      "DESCRIPTION": "To rearrange rows, simply set the [reorderable] attribute to <b>true</b>. A draggable area will appear at the beginning of each row, allowing you to move them to the desired order.",
      "NOTE": "This does not actually change the row order. It only provides the previous and new index positions via the <b>onReorder</b> method.",
      "EXAMPLE_CODE_TITLE": "Example code:",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML codes",
      "TABLE_TAB_THIRD": "Typescript codes",
      "CODE_DESCRIPTION_TITLE": "Code explanation",
      "ATTRIBUTE_REORDERABLE": "To enable the sorting feature, set it to <b>true</b>. To disable it, set it to <b>false</b>.",
      "ATTRIBUTE_ONREORDER": "Provides the previous and new positions of the reordered row.",
      "ATTRIBUTE_REORDER_WIDTH": "We can adjust the column width with this.",
      "ATTRIBUTE_REORDER_TEXT_ALIGN": "We use this to determine whether the icon inside the column will be aligned to the left, right, or center.",
      "TABLE_VALUE_TYPES": "Accepted Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "PAGINATION_PAGE": {
      "DESCRIPTION": "To enable pagination, you need to set the <b>[pageable]</b> attribute to true in the grid element.",
      "EXAMPLE_CODE_TITLE": "Example code:",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML code",
      "TABLE_TAB_THIRD": "Typescript code",
      "TAB_PANE_FIRST": "Pagination example",
      "CODE_DESCRIPTION_TITLE": "Code explanation",
      "PAGEABLE_DESCRIPTION": "To activate pagination, set it to true | to disable it, set it to false",
      "PAGE_SIZE_DESCRIPTION": "You can bind the page size to a variable and set an initial value. Just provide a number as the value",
      "PAGE_SIZE_LIST_DESCRIPTION": "If you want to customize the page size list, you must provide a list of numbers as the value for this attribute",
      "TABLE_VALUE_TYPES": "Possible Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "SORT_PAGE": {
      "DESCRIPTION": "To activate the sorting feature, you need to set the <b>[sortable]</b> attribute to true in the grid element. You can also disable column-based sorting if desired.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code",
      "TAB_PANE_FIRST": "Sort Example",
      "CODE_DESCRIPTION_TITLE": "Code Explanation",
      "SORTABLE_DESCRIPTION": "To enable sorting, set it to true. To disable it, set it to false.",
      "COLUMN_SORTABLE_DESCRIPTION": "You can enable or disable column-based sorting.",
      "TABLE_VALUE_TYPES": "Acceptable Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value"
    },
    "FILTER_PAGE": {
      "DESCRIPTION": "To activate the filtering structure, you need to set the <b>[sortable]</b> attribute to true in the grid element. You can also disable column-based filtering if desired. Additionally, you can specify different filter types for various data types.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Filter Example",
      "ACCEPT_FILTER": "Enable filter feature",
      "USE_FILTER_FOR_ID": "Use filter for ID",
      "USE_FILTER_FIRST_NAME": "Use filter for First Name",
      "USE_FILTER_LAST_NAME": "Use filter for Last Name",
      "USE_FILTER_DATE": "Use filter for Date of Birth",
      "USE_FILTER_SALARY": "Use filter for Salary",
      "USE_FILTER_ISACTIVE": "Use filter for Is Active",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code",
      "CODE_DESCRIPTION_TITLE": "Code Explanation",
      "FILTERABLE_DESCRIPTION": "To enable the filtering feature, set it to <b>true</b>. To disable it, set it to <b>false</b>.",
      "COLUMN_FILTERABLE_DESCRIPTION": "You can enable or disable column-based filtering.",
      "COLUMN_FILTER_TYPE_DESCRIPTION": "You can change the column-based filter type. The default type is text, but for date, date-time, and number values, you can specify a special filter type. Available types: text | date | date-time | number.",
      "NOTE": "Note: When you change the filter type, the filtering options also change. For text filtering, options include 'contains' and 'does not contain', whereas for number filtering, options include 'equal', 'greater than', and 'less than'. For date filtering, the only available option is 'equal to'.",
      "FORMAT_DESCRIPTION": "If you set the FilterType to date or number, you can format the column. For date formatting, use the (d = day || M = month || y = year) format combination. Example: format='dd.MM.yyyy'. If you set it to number, you can choose <b>n</b> (number) or <b>c</b> (currency). For 'n', you can define the number of decimal places (default is 2). For 'c', you can set the currency symbol, its position (before or after), and the fraction count.",
      "SYMBOL_DESCRIPTION": "If the format is set to 'c', you can determine whether the symbol appears before or after the value and set the fraction count.",
      "TABLE_VALUE_TYPES": "Acceptable Value Types",
      "TABLE_DEFAULT_VALUE": "Default Value",
      "BOOLEAN_DATA": "['Value for true', 'Value for false']",
      "FILTER_DATA": "(value for select option, name to be displayed)",
      "SHOW_CHECKBOX": "true (If set to true, a selectable checkbox appears. You can use the onChange event to retrieve all values of that row.)",
      "FORMAT": "(d = day || M = month || y = year) | n | c",
      "IF_FORMAT_C": "(If the format is 'c')",
      "EMPTY_SYMBOL": "Default is empty, but you can specify symbols such as '‚Ç∫', '$', '‚Ç¨'.",
      "SYMBOL": "(If true, the symbol appears before the value; if false, it appears after.)",
      "FLOAT": "(Specifies how many decimal places to display.)"
    }
  },
  "FLEXI_SELECT": {
    "FLEXI_SELECT_PAGE": {
      "TITLE": "Flexi Select",
      "CARD_TITLE": "What is Flexi Select?",
      "DESCRIPTION": "Meet Flexi Select, a stylish and user-friendly Select component for your Angular applications. With this component, you can display your lists within a select dropdown while enabling search functionality. Thanks to its lazy loading structure, you can achieve better performance when displaying large lists.",
      "LINKED_PART_ONE": "Flexi Select is open-source. You can access the source code ",
      "LINKED_PART_TWO": "by clicking here",
      "LINKED_PART_THREE": ".",
      "CONTRIBUTION_NOTE": "Don't forget to give a star (‚≠ê) to the GitHub repository to support me and contribute to the project.",
      "LINKED_CONTRIBUTION_NOTE": "Click here to access the GitHub repository",
      "DOCUMENTATION_NOTE": "By following the documentation step by step, you can learn how to install and use Flexi Select in your project. Below, you will find an example that showcases all the features of Flexi Select. After this section, you will learn how to set up and configure the component step by step.",
      "NOTE_ALERT": "Note: You can use it in Angular v18+ projects.",
      "CURRENT_VERSION": "Current version: v19.",
      "OLDER_VERSION_NOTE": "For v18, you should use the package versions compatible with v18.",
      "FULL_FEATURES_EXAMPLE": "An example with all features enabled is shown below."
    },
    "INSTALLATION_PAGE": {
      "CARD_TITLE": "Installation",
      "DESCRIPTION": "To use/update Flexi Select in your Angular project, you need to run the following npm command."
    },
    "FIRST_USE_PAGE": {
      "CARD_TITLE": "First Use",
      "DESCRIPTION_FIRST": "You need to import Flexi Select into the standalone component where you want to use it.",
      "DESCRIPTION_SECOND": "In HTML, you need to call the component element and pass the data inside it. Assign the field you want to display in the select to the 'label' attribute and the field you want to retrieve as a value to the 'value' attribute.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "OR": "Or",
      "NOTE_ALERT": "Important Note: If there are multiple flexi-select components on the same page, you must provide a unique ID. Otherwise, they may interfere with each other's values!",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code",
      "CODE_DESCRIPTION_TITLE": "Explanation of the Code",
      "FLEXISELECT_DESCRIPTION": "The Flexi Select element. This is how we add the select component to our page.",
      "DATA_DESCRIPTION": "We assign our list to the data attribute.",
      "NOTE": "Note: Variables in the project are stored using the signal structure, but it is not mandatory. You can use regular variables if you prefer.",
      "LABEL_DESCRIPTION": "We specify the property name that we want to be displayed in the select.",
      "VALUE_DESCRIPTION": "We specify the property name that serves as a unique identifier for each record, such as an ID.",
      "NGMODEL_DESCRIPTION": "We can bind a variable to the select component using two-way data binding.",
      "EVENT_DESCRIPTION": "We can capture the selected value immediately after selection using this event.",
      "TABLE_VALUE_TYPES": "Acceptable Value Types",
      "SUCCESS_ALERT_NOTE": "With our first example, we have successfully displayed our list within the select component."
    },
    "CUSTOM_OPTION_PAGE": {
      "DESCRIPTION": "If you want to create a custom option structure within Flexi Select, you can do so using flexi-option.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code",
      "CODE_DESCRIPTION_TITLE": "Explanation of the Code",
      "FLEXIOPTION_DESCRIPTION": "A custom option element that can be added within Flexi Select."
    },
    "MULTIPLE_PAGE": {
      "CARD_TITLE": "Multiple Selection",
      "DESCRIPTION": "If you want to enable multiple selection, simply set the multiple attribute to true.",
      "EXAMPLE_CODE_TITLE": "Example Code:",
      "NOTE": "Important Note: If there are multiple flexi-select components on the same page, you must provide a unique ID for each. Otherwise, they may interfere with each other's values!",
      "TABLE_TAB_FIRST": "Example",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code",
      "TAB_PANE_FIRST": "First Use",
      "CODE_DESCRIPTION_TITLE": "Explanation of the Code",
      "MULTIPLE_DESCRIPTION": "To enable multiple selection, set the value to true.",
      "CLOSE_AFTER_DESCRIPTION": "If you want the select to remain open after selection, set this attribute to false. The default value is true, which closes the select after each selection.",
      "HEIGHT_DESCRIPTION": "You can adjust the height of the select. The minimum height is 36px.",
      "TABLE_VALUE_TYPES": "Possible Value Types"
    },
    "FULL_COMPONENT": {
      "TABLE_TAB_FIRST": "Example",
      "TAB_PANE_FIRST": "Example view of the full version",
      "TABLE_TAB_SECOND": "HTML Code",
      "TABLE_TAB_THIRD": "TypeScript Code"
    }
  }
}
