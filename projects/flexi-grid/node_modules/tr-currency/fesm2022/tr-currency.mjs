import * as i0 from '@angular/core';
import { Pipe } from '@angular/core';

class TrCurrencyPipe {
    transform(value, symbol = "", isCurrencyFront = true, fraction = 2) {
        if (fraction < 0)
            fraction = 0;
        if (value === 0 || value === undefined) {
            if (fraction === 0) {
                if (isCurrencyFront) {
                    return `${symbol}0`;
                }
                else {
                    return `0 ${symbol}`;
                }
            }
            else {
                if (isCurrencyFront) {
                    return `${symbol}0,${'0'.repeat(fraction)}`;
                }
                else {
                    return `0,${'0'.repeat(fraction)} ${symbol}`;
                }
            }
        }
        let isValueNegative = false;
        if (value < 0) {
            isValueNegative = true;
            value *= -1;
        }
        value = parseFloat(value.toFixed(fraction));
        let money = value.toString().split(".");
        let newMoney = "";
        let lira = money[0];
        let penny = money.length > 1 ? money[1] : "";
        // Küsuratları doğru uzunlukta yapma
        if (penny.length < fraction) {
            penny = penny + "0".repeat(fraction - penny.length);
        }
        let count = 0;
        for (let i = lira.length; i > 0; i--) {
            if (count == 3 && count < (lira.length)) {
                newMoney = lira[i - 1] + "." + newMoney;
                count = 1;
            }
            else {
                newMoney = lira[i - 1] + newMoney;
                count++;
            }
        }
        if (!isCurrencyFront) {
            if (fraction === 0) {
                newMoney = `${newMoney} ${symbol}`;
            }
            else {
                newMoney = `${newMoney},${penny} ${symbol}`;
            }
        }
        else {
            if (fraction === 0) {
                newMoney = `${symbol}${newMoney}`;
            }
            else {
                newMoney = `${symbol}${newMoney},${penny}`;
            }
        }
        if (isValueNegative) {
            newMoney = "-" + newMoney;
        }
        return newMoney;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, isStandalone: true, name: "trCurrency" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'trCurrency',
                    standalone: true
                }]
        }] });

/*
 * Public API Surface of my-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { TrCurrencyPipe };
//# sourceMappingURL=tr-currency.mjs.map
