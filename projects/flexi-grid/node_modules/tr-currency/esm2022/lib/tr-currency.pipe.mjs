import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TrCurrencyPipe {
    transform(value, symbol = "", isCurrencyFront = true, fraction = 2) {
        if (fraction < 0)
            fraction = 0;
        if (value === 0 || value === undefined) {
            if (fraction === 0) {
                if (isCurrencyFront) {
                    return `${symbol}0`;
                }
                else {
                    return `0 ${symbol}`;
                }
            }
            else {
                if (isCurrencyFront) {
                    return `${symbol}0,${'0'.repeat(fraction)}`;
                }
                else {
                    return `0,${'0'.repeat(fraction)} ${symbol}`;
                }
            }
        }
        let isValueNegative = false;
        if (value < 0) {
            isValueNegative = true;
            value *= -1;
        }
        value = parseFloat(value.toFixed(fraction));
        let money = value.toString().split(".");
        let newMoney = "";
        let lira = money[0];
        let penny = money.length > 1 ? money[1] : "";
        // Küsuratları doğru uzunlukta yapma
        if (penny.length < fraction) {
            penny = penny + "0".repeat(fraction - penny.length);
        }
        let count = 0;
        for (let i = lira.length; i > 0; i--) {
            if (count == 3 && count < (lira.length)) {
                newMoney = lira[i - 1] + "." + newMoney;
                count = 1;
            }
            else {
                newMoney = lira[i - 1] + newMoney;
                count++;
            }
        }
        if (!isCurrencyFront) {
            if (fraction === 0) {
                newMoney = `${newMoney} ${symbol}`;
            }
            else {
                newMoney = `${newMoney},${penny} ${symbol}`;
            }
        }
        else {
            if (fraction === 0) {
                newMoney = `${symbol}${newMoney}`;
            }
            else {
                newMoney = `${symbol}${newMoney},${penny}`;
            }
        }
        if (isValueNegative) {
            newMoney = "-" + newMoney;
        }
        return newMoney;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, isStandalone: true, name: "trCurrency" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'trCurrency',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHItY3VycmVuY3kucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL215LWxpYi9zcmMvbGliL3RyLWN1cnJlbmN5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxjQUFjO0lBRXpCLFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsRUFBRSxFQUFFLGtCQUEyQixJQUFJLEVBQUUsV0FBa0IsQ0FBQztRQUNoRyxJQUFHLFFBQVEsR0FBRyxDQUFDO1lBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3ZDLElBQUcsUUFBUSxLQUFLLENBQUMsRUFBQyxDQUFDO2dCQUNqQixJQUFHLGVBQWUsRUFBQyxDQUFDO29CQUNsQixPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUE7Z0JBQ3JCLENBQUM7cUJBQUksQ0FBQztvQkFDSixPQUFPLEtBQUssTUFBTSxFQUFFLENBQUE7Z0JBQ3RCLENBQUM7WUFDSCxDQUFDO2lCQUFJLENBQUM7Z0JBQ0osSUFBRyxlQUFlLEVBQUMsQ0FBQztvQkFDbEIsT0FBTyxHQUFHLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQzlDLENBQUM7cUJBQUksQ0FBQztvQkFDSixPQUFPLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDL0MsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO1FBRUQsSUFBSSxlQUFlLEdBQVcsS0FBSyxDQUFDO1FBQ3BDLElBQUcsS0FBSyxHQUFHLENBQUMsRUFBQyxDQUFDO1lBQ1osZUFBZSxHQUFHLElBQUksQ0FBQztZQUN2QixLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDO1FBRUQsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFNUMsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUU3QyxvQ0FBb0M7UUFDcEMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLFFBQVEsRUFBRSxDQUFDO1lBQzVCLEtBQUssR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3JDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDeEMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQTtnQkFDckMsS0FBSyxHQUFHLENBQUMsQ0FBQztZQUNaLENBQUM7aUJBQU0sQ0FBQztnQkFDTixRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUE7Z0JBQy9CLEtBQUssRUFBRSxDQUFDO1lBQ1YsQ0FBQztRQUNILENBQUM7UUFFRCxJQUFHLENBQUMsZUFBZSxFQUFDLENBQUM7WUFDbkIsSUFBRyxRQUFRLEtBQUssQ0FBQyxFQUFDLENBQUM7Z0JBQ2pCLFFBQVEsR0FBRyxHQUFHLFFBQVEsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNyQyxDQUFDO2lCQUFJLENBQUM7Z0JBQ0osUUFBUSxHQUFHLEdBQUcsUUFBUSxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUM5QyxDQUFDO1FBQ0gsQ0FBQzthQUNHLENBQUM7WUFDSCxJQUFHLFFBQVEsS0FBSyxDQUFDLEVBQUMsQ0FBQztnQkFDakIsUUFBUSxHQUFHLEdBQUcsTUFBTSxHQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLENBQUM7aUJBQUksQ0FBQztnQkFDSixRQUFRLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQzdDLENBQUM7UUFDSCxDQUFDO1FBRUQsSUFBRyxlQUFlLEVBQUMsQ0FBQztZQUNsQixRQUFRLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQztRQUM1QixDQUFDO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQzs4R0FyRVUsY0FBYzs0R0FBZCxjQUFjOzsyRkFBZCxjQUFjO2tCQUoxQixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxZQUFZO29CQUNsQixVQUFVLEVBQUUsSUFBSTtpQkFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3RyQ3VycmVuY3knLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyQ3VycmVuY3lQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gIHRyYW5zZm9ybSh2YWx1ZTogbnVtYmVyLCBzeW1ib2w6IHN0cmluZyA9IFwiXCIsIGlzQ3VycmVuY3lGcm9udDogYm9vbGVhbiA9IHRydWUsIGZyYWN0aW9uOm51bWJlciA9IDIpOiBzdHJpbmcge1xyXG4gICAgaWYoZnJhY3Rpb24gPCAwKSBmcmFjdGlvbiA9IDA7XHJcblxyXG4gICAgaWYgKHZhbHVlID09PSAwIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHsgXHJcbiAgICAgIGlmKGZyYWN0aW9uID09PSAwKXtcclxuICAgICAgICBpZihpc0N1cnJlbmN5RnJvbnQpe1xyXG4gICAgICAgICAgcmV0dXJuIGAke3N5bWJvbH0wYFxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgcmV0dXJuIGAwICR7c3ltYm9sfWBcclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlmKGlzQ3VycmVuY3lGcm9udCl7XHJcbiAgICAgICAgICByZXR1cm4gYCR7c3ltYm9sfTAsJHsnMCcucmVwZWF0KGZyYWN0aW9uKX1gO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgcmV0dXJuIGAwLCR7JzAnLnJlcGVhdChmcmFjdGlvbil9ICR7c3ltYm9sfWA7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgIH0gICAgICBcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNWYWx1ZU5lZ2F0aXZlOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGlmKHZhbHVlIDwgMCl7XHJcbiAgICAgIGlzVmFsdWVOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICAgIHZhbHVlICo9IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZS50b0ZpeGVkKGZyYWN0aW9uKSk7XHJcblxyXG4gICAgbGV0IG1vbmV5ID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIi5cIilcclxuICAgIGxldCBuZXdNb25leSA9IFwiXCI7XHJcbiAgICBsZXQgbGlyYSA9IG1vbmV5WzBdO1xyXG4gICAgbGV0IHBlbm55ID0gbW9uZXkubGVuZ3RoID4gMSA/IG1vbmV5WzFdIDogXCJcIjtcclxuXHJcbiAgICAvLyBLw7xzdXJhdGxhcsSxIGRvxJ9ydSB1enVubHVrdGEgeWFwbWFcclxuICAgIGlmIChwZW5ueS5sZW5ndGggPCBmcmFjdGlvbikge1xyXG4gICAgICBwZW5ueSA9IHBlbm55ICsgXCIwXCIucmVwZWF0KGZyYWN0aW9uIC0gcGVubnkubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IGxpcmEubGVuZ3RoOyBpID4gMDsgaS0tKSB7ICAgICAgXHJcbiAgICAgIGlmIChjb3VudCA9PSAzICYmIGNvdW50IDwgKGxpcmEubGVuZ3RoKSkge1xyXG4gICAgICAgIG5ld01vbmV5ID0gbGlyYVtpLTFdICsgXCIuXCIgKyBuZXdNb25leSBcclxuICAgICAgICBjb3VudCA9IDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3TW9uZXkgPSBsaXJhW2ktMV0gKyBuZXdNb25leVxyXG4gICAgICAgIGNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZighaXNDdXJyZW5jeUZyb250KXtcclxuICAgICAgaWYoZnJhY3Rpb24gPT09IDApe1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7bmV3TW9uZXl9ICR7c3ltYm9sfWA7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7bmV3TW9uZXl9LCR7cGVubnl9ICR7c3ltYm9sfWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgIGlmKGZyYWN0aW9uID09PSAwKXtcclxuICAgICAgICBuZXdNb25leSA9IGAke3N5bWJvbH0ke25ld01vbmV5fWA7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7c3ltYm9sfSR7bmV3TW9uZXl9LCR7cGVubnl9YDtcclxuICAgICAgfSAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGlmKGlzVmFsdWVOZWdhdGl2ZSl7XHJcbiAgICAgIG5ld01vbmV5ID0gXCItXCIgKyBuZXdNb25leTtcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gbmV3TW9uZXk7XHJcbiAgfVxyXG59XHJcbiJdfQ==