import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TrCurrencyPipe {
    transform(value, symbol = "", isCurrencyFront = true, fraction = 2) {
        if (fraction < 0)
            fraction = 0;
        if (value == 0) {
            return `0,${'0'.repeat(fraction)} ${symbol}`;
        }
        let isValueNegative = false;
        if (value < 0) {
            isValueNegative = true;
            value *= -1;
        }
        value = parseFloat(value.toFixed(fraction)); // Küsuratları yuvarlama
        let money = value.toString().split(".");
        let newMoney = "";
        let lira = money[0];
        let penny = money.length > 1 ? money[1] : "";
        // Küsuratları doğru uzunlukta yapma
        if (penny.length < fraction) {
            penny = penny + "0".repeat(fraction - penny.length);
        }
        let count = 0;
        for (let i = lira.length; i > 0; i--) {
            if (count == 3 && count < (lira.length)) {
                newMoney = lira[i - 1] + "." + newMoney;
                count = 1;
            }
            else {
                newMoney = lira[i - 1] + newMoney;
                count++;
            }
        }
        if (!isCurrencyFront) {
            if (fraction === 0) {
                newMoney = `${newMoney} ${symbol}`;
            }
            else {
                newMoney = `${newMoney},${penny} ${symbol}`;
            }
        }
        else {
            if (fraction === 0) {
                newMoney = `${symbol}${newMoney}`;
            }
            else {
                newMoney = `${symbol}${newMoney},${penny}`;
            }
        }
        if (isValueNegative) {
            newMoney = "-" + newMoney;
        }
        return newMoney;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, isStandalone: true, name: "trCurrency" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.3", ngImport: i0, type: TrCurrencyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'trCurrency',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHItY3VycmVuY3kucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL215LWxpYi9zcmMvbGliL3RyLWN1cnJlbmN5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7O0FBTXBELE1BQU0sT0FBTyxjQUFjO0lBRXpCLFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsRUFBRSxFQUFFLGtCQUEyQixJQUFJLEVBQUUsV0FBa0IsQ0FBQztRQUNoRyxJQUFHLFFBQVEsR0FBRyxDQUFDO1lBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNmLE9BQU8sS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQy9DLENBQUM7UUFFRCxJQUFJLGVBQWUsR0FBVyxLQUFLLENBQUM7UUFDcEMsSUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUFDLENBQUM7WUFDWixlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNkLENBQUM7UUFFRCxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtRQUVyRSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRTdDLG9DQUFvQztRQUNwQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7WUFDNUIsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsQ0FBQztRQUVELElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUN4QyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFBO2dCQUNyQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ1osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtnQkFDL0IsS0FBSyxFQUFFLENBQUM7WUFDVixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUcsQ0FBQyxlQUFlLEVBQUMsQ0FBQztZQUNuQixJQUFHLFFBQVEsS0FBSyxDQUFDLEVBQUMsQ0FBQztnQkFDakIsUUFBUSxHQUFHLEdBQUcsUUFBUSxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ3JDLENBQUM7aUJBQUksQ0FBQztnQkFDSixRQUFRLEdBQUcsR0FBRyxRQUFRLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQzlDLENBQUM7UUFDSCxDQUFDO2FBQ0csQ0FBQztZQUNILElBQUcsUUFBUSxLQUFLLENBQUMsRUFBQyxDQUFDO2dCQUNqQixRQUFRLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7WUFDcEMsQ0FBQztpQkFBSSxDQUFDO2dCQUNKLFFBQVEsR0FBRyxHQUFHLE1BQU0sR0FBRyxRQUFRLElBQUksS0FBSyxFQUFFLENBQUM7WUFDN0MsQ0FBQztRQUNILENBQUM7UUFFRCxJQUFHLGVBQWUsRUFBQyxDQUFDO1lBQ2xCLFFBQVEsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDO1FBQzVCLENBQUM7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzhHQXpEVSxjQUFjOzRHQUFkLGNBQWM7OzJGQUFkLGNBQWM7a0JBSjFCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndHJDdXJyZW5jeScsXHJcbiAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJDdXJyZW5jeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIHN5bWJvbDogc3RyaW5nID0gXCJcIiwgaXNDdXJyZW5jeUZyb250OiBib29sZWFuID0gdHJ1ZSwgZnJhY3Rpb246bnVtYmVyID0gMik6IHN0cmluZyB7XHJcbiAgICBpZihmcmFjdGlvbiA8IDApIGZyYWN0aW9uID0gMDtcclxuXHJcbiAgICBpZiAodmFsdWUgPT0gMCkgeyAgICAgIFxyXG4gICAgICByZXR1cm4gYDAsJHsnMCcucmVwZWF0KGZyYWN0aW9uKX0gJHtzeW1ib2x9YDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNWYWx1ZU5lZ2F0aXZlOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGlmKHZhbHVlIDwgMCl7XHJcbiAgICAgIGlzVmFsdWVOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICAgIHZhbHVlICo9IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZS50b0ZpeGVkKGZyYWN0aW9uKSk7IC8vIEvDvHN1cmF0bGFyxLEgeXV2YXJsYW1hXHJcblxyXG4gICAgbGV0IG1vbmV5ID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIi5cIilcclxuICAgIGxldCBuZXdNb25leSA9IFwiXCI7XHJcbiAgICBsZXQgbGlyYSA9IG1vbmV5WzBdO1xyXG4gICAgbGV0IHBlbm55ID0gbW9uZXkubGVuZ3RoID4gMSA/IG1vbmV5WzFdIDogXCJcIjtcclxuXHJcbiAgICAvLyBLw7xzdXJhdGxhcsSxIGRvxJ9ydSB1enVubHVrdGEgeWFwbWFcclxuICAgIGlmIChwZW5ueS5sZW5ndGggPCBmcmFjdGlvbikge1xyXG4gICAgICBwZW5ueSA9IHBlbm55ICsgXCIwXCIucmVwZWF0KGZyYWN0aW9uIC0gcGVubnkubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IGxpcmEubGVuZ3RoOyBpID4gMDsgaS0tKSB7ICAgICAgXHJcbiAgICAgIGlmIChjb3VudCA9PSAzICYmIGNvdW50IDwgKGxpcmEubGVuZ3RoKSkge1xyXG4gICAgICAgIG5ld01vbmV5ID0gbGlyYVtpLTFdICsgXCIuXCIgKyBuZXdNb25leSBcclxuICAgICAgICBjb3VudCA9IDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3TW9uZXkgPSBsaXJhW2ktMV0gKyBuZXdNb25leVxyXG4gICAgICAgIGNvdW50Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZighaXNDdXJyZW5jeUZyb250KXtcclxuICAgICAgaWYoZnJhY3Rpb24gPT09IDApe1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7bmV3TW9uZXl9ICR7c3ltYm9sfWA7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7bmV3TW9uZXl9LCR7cGVubnl9ICR7c3ltYm9sfWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgIGlmKGZyYWN0aW9uID09PSAwKXtcclxuICAgICAgICBuZXdNb25leSA9IGAke3N5bWJvbH0ke25ld01vbmV5fWA7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG5ld01vbmV5ID0gYCR7c3ltYm9sfSR7bmV3TW9uZXl9LCR7cGVubnl9YDtcclxuICAgICAgfSAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGlmKGlzVmFsdWVOZWdhdGl2ZSl7XHJcbiAgICAgIG5ld01vbmV5ID0gXCItXCIgKyBuZXdNb25leTtcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gbmV3TW9uZXk7XHJcbiAgfVxyXG59XHJcbiJdfQ==